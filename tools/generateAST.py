from typing import List
import os.path

# edit this to modify generated Python
config = [
    "Binary   = left: Expr, operator: Token, right: Expr",
    "Grouping = expression: Expr",
    "Literal  = value: object",
    "Unary    = operator: Token, right: Expr"
]

def writeAST(baseClass: str, types: List[str]) -> None:
    with open(os.path.join(os.path.dirname(__file__), "../src/expr.py"), "w+") as f:
        f.write("from tokens import Token\n")
        f.write("from abc import ABC, abstractmethod\n\n")
        f.write("# Please do not modify this file directly!\n")
        f.write("# It was generated by ../tools/generateAST.py\n")
        f.write("# Edit the config there instead.\n\n")
        f.write("class " + baseClass + "(ABC):\n")
        f.write("\t@abstractmethod\n")
        f.write("\tdef accept(self, visitor: 'Visitor'):\n")
        f.write("\t\tpass\n\n")
        f.write("\tclass Visitor:\n")
        writeVisitor(f, baseClass, types)
        f.write("\n")

        for _type in types:
            className = _type.split('=')[0].strip()
            fields = _type.split('= ')[1]
            writeType(f, baseClass, className, fields)

def writeType(file, baseClass: str, className: str, fieldList: str) -> None:
    file.write("class " + className + "(" + baseClass + "):\n")
    file.write("\tdef __init__(self, " + fieldList + "):\n")

    fields = fieldList.split(', ')
    for field in fields:
        name = field.split(':')[0]
        file.write("\t\tself." + name + " = " + name + "\n")

    file.write("\n\tdef accept(self, visitor: Expr.Visitor):\n")
    file.write("\t\treturn visitor.visit" + className + baseClass + "(self)")

    file.write('\n\n')

def writeVisitor(file, baseClass: str, types: List[str]):
    for _type in types:
        className = _type.split('=')[0].strip()
        file.write("\t\t@abstractmethod\n")
        file.write("\t\tdef visit" + className + baseClass + "(self, " + baseClass.lower() + ": '" + className + "'):\n")
        file.write("\t\t\tpass\n")


writeAST('Expr', config)
