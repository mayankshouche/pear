from typing import List
import os.path

# edit this to modify generated Python
config = [
    "Binary   = left: Expr, operator: Token, right: Expr",
    "Grouping = expression: Expr",
    "Literal  = value: object",
    "Unary    = operator: Token, right: Expr"
]

def writeAST(baseClass: str, types: List[str]) -> None:
    with open(os.path.join(os.path.dirname(__file__), "../src/expr.py"), "w+") as f:
        f.write("from tokens import Token\n\n")
        f.write("# Please do not modify this file directly!\n")
        f.write("# It was generated by ../tools/generateAST.py\n")
        f.write("# Edit the config there instead.\n\n")
        f.write("class " + baseClass + ":\n")
        f.write("\tpass\n\n")

        for _type in types:
            className = _type.split('=')[0].strip()
            fields = _type.split('= ')[1]
            writeType(f, baseClass, className, fields)

def writeType(file, baseClass: str, className: str, fieldList: str) -> None:
    file.write("class " + className + "(" + baseClass + "):\n")
    file.write("\tdef __init__(self, " + fieldList + "):\n")

    fields = fieldList.split(', ')
    for field in fields:
        name = field.split(':')[0]
        file.write("\t\tself." + name + " = " + name + "\n")

    file.write('\n')

writeAST('Expr', config)
